import { ConnectionConstraint } from './connection-constraint.js';
import { Particle } from './particle.js';
import { Search } from './search.js';
import { Slot } from './slot.js';
import { Handle } from './handle.js';
export declare class Recipe {
    private _particles;
    private _handles;
    private _slots;
    private _name;
    private _localName;
    private _cloneMap;
    annotation: string | undefined;
    private _connectionConstraints;
    private _obligations;
    private _verbs;
    private _search;
    private _patterns;
    constructor(name?: any);
    newConnectionConstraint(from: any, to: any, direction: any): ConnectionConstraint;
    newObligation(from: any, to: any, direction: any): ConnectionConstraint;
    removeObligation(obligation: any): void;
    removeConstraint(constraint: any): void;
    clearConnectionConstraints(): void;
    newParticle(name: any): Particle;
    removeParticle(particle: Particle): void;
    newHandle(): Handle;
    removeHandle(handle: any): void;
    newSlot(name: any): Slot;
    removeSlot(slot: any): void;
    isResolved(): boolean;
    _findDuplicate(items: any, options: any): any;
    _isValid(options?: any): boolean;
    name: string;
    localName: string;
    particles: Particle[];
    handles: Handle[];
    slots: Slot[];
    readonly connectionConstraints: ConnectionConstraint[];
    readonly obligations: ConnectionConstraint[];
    verbs: string[];
    search: Search;
    setSearchPhrase(phrase: any): void;
    readonly slotConnections: any[];
    readonly handleConnections: any[];
    isEmpty(): boolean;
    findHandle(id: any): Handle;
    findSlot(id: any): Slot;
    patterns: string[];
    description: any;
    digest(): Promise<any>;
    normalize(options: any): boolean;
    clone(cloneMap?: any): Recipe;
    mergeInto(recipe: any): {
        handles: any;
        particles: any;
        slots: any;
        cloneMap: Map<any, any>;
    };
    _copyInto(recipe: any, cloneMap: any): void;
    updateToClone(dict: any): {};
    static over(results: any, walker: any, strategy: any): any;
    _makeLocalNameMap(): Map<any, any>;
    toString(options?: any): string;
}
